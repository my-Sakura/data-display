import { get_data, get_dynamic } from '@/services/homepage/data';
import { PageContainer } from '@ant-design/pro-layout';
import { Card, Col, Input, Row, Typography } from 'antd';
import React, { useEffect, useState } from 'react';
import DynamicChart from './components/dynamic';
import StaticAbsorbChart from './components/staticAbsorb';
import StaticMainChart from './components/staticMain';
import StaticRefChart from './components/staticRef';
import StatisticTable from './components/table';

const { Title } = Typography;
const { Search } = Input;

const HomePage = () => {
  const [dynamic, setDynamic] = useState([]);
  const [staticMain, setStaticMain] = useState([]);
  const [staticRef, setStaticRef] = useState([]);
  const [staticAbsorb, setStaticAbsorb] = useState([]);
  const [other, setOther] = useState([]);

  useEffect(() => {
    let origin = {
      Data: {
        SpecStu: '清洗模块正常 系统空闲 无硬件异常 无储存错误 ',
        Temperature: 29.460848,
        NO3: 0.028936217,
        TSS: 101.739914,
        COD: 6.751733,
        NO3Wave: 220,
        CODWave: 600,
        TSSWave: 250,
        RefCorFac: 0.5,
        NO3CorFac: 2.2,
        TurCorFac: 0.9,
        ZeroMain: [
          1490, 2543, 2822, 3297, 3774, 4561, 5833, 7258, 8452, 9210, 9618, 10180, 11528, 13907,
          18282, 29268, 41248, 43195, 38217, 35204, 34559, 37755, 39797, 40801, 39185, 34358, 31971,
          34220, 42231, 45639, 41145, 37960, 37590, 37468, 35500, 32615, 31263, 32024, 33898, 35611,
          37262, 39748, 43783, 49300, 52393, 51521, 48734, 46756, 45971, 44574, 42113, 38822, 35262,
          31771, 30323, 29660, 28140, 26007, 25352, 25345, 25281, 25147, 25828, 27268, 28516, 28903,
          30076, 32857, 37287, 41390, 45488, 45695, 42061, 37992, 36527, 36023, 36878, 37936, 37429,
          35801, 35639, 35907, 36261, 36797, 37403, 36050, 34451, 33726, 34515, 35314, 35836, 36202,
          37199, 38225, 40654, 44852, 50002, 53284, 53813, 52864, 51294, 50350, 50634, 51692, 53959,
          55077, 55706, 56153, 56727, 56814, 56185, 55588, 55709, 56960, 56236, 54803, 52552, 50529,
          47554, 45613, 44524, 44563, 45600, 51913, 55942, 56668, 54111, 50157, 44667, 39091, 34509,
          31728, 29424, 27827, 26912, 26220, 26014, 25966, 25839, 26154, 26442, 26167, 26355, 28747,
          32740, 33794, 32235, 29604, 27724, 26262, 26505, 26343, 65535, 60465, 54096, 49347, 46306,
          43962, 41873, 40619, 40111, 40378, 40940, 40896, 41082, 41275, 41100, 39793, 37976, 35758,
          34243, 33457, 33122, 33311, 33605, 34023, 35084, 35787, 35397, 34714, 35459, 36534, 36619,
          35797, 34551, 32471, 30825, 29804, 29249, 28920, 29189, 29576, 29726, 29196, 28210, 27208,
          26456, 25601, 24683, 23827, 23083, 22519, 22141, 21869, 21692, 21310, 21050, 21036, 21094,
          20815, 19878, 18818, 18030, 17499, 17127, 16593, 16200, 15997, 15906, 15854, 15576, 14942,
          14268, 13631, 13165, 12740, 12462, 12423, 12595, 12631, 12189, 11433, 10622, 10083, 9723,
          9461, 9237, 9056, 8799, 8506, 8121, 7756, 7502, 7281, 7183, 7076, 6947, 6812, 6553, 6333,
          6079, 5846, 5623, 5469, 5331, 5183,
        ],
        ZeroRef: [
          681, 1350, 1114, 1197, 1320, 1555, 1951, 2407, 2764, 2984, 3131, 3366, 3824, 4696, 6202,
          9804, 13836, 14649, 12985, 11870, 11744, 12826, 13723, 14282, 13964, 12581, 11857, 12745,
          15643, 16802, 15161, 13857, 13651, 13583, 12976, 12059, 11763, 12157, 12961, 13605, 14505,
          15553, 17326, 19476, 20684, 20216, 19001, 17988, 17524, 16897, 15878, 14600, 13233, 11988,
          11504, 11275, 10697, 9998, 9814, 9829, 9806, 9823, 10133, 10757, 11245, 11474, 12052,
          13209, 14964, 16702, 18224, 18163, 16547, 15097, 14463, 14263, 14619, 14962, 14713, 14143,
          14114, 14332, 14541, 14799, 14953, 14554, 13975, 13780, 14135, 14567, 14840, 15093, 15520,
          16120, 17208, 19121, 21337, 22915, 23216, 22737, 22084, 21846, 21986, 22585, 23674, 24698,
          25198, 25747, 26262, 26367, 25774, 25148, 25408, 26295, 26104, 24540, 23234, 22127, 20963,
          20039, 19636, 19512, 20206, 23052, 25774, 26238, 23956, 21943, 19536, 17103, 15236, 14067,
          13084, 12384, 11964, 11726, 11639, 11580, 11553, 11734, 11864, 11766, 11903, 12979, 14629,
          15126, 14444, 13357, 12519, 11918, 12013, 11858, 30884, 27544, 24818, 22729, 21429, 20378,
          19547, 18979, 18782, 18886, 19141, 19302, 19408, 19500, 19420, 18858, 17897, 16944, 16313,
          15935, 15788, 15895, 16049, 16281, 16709, 17093, 16988, 16684, 16992, 17442, 17538, 17227,
          16679, 15821, 15065, 14577, 14313, 14139, 14144, 14273, 14336, 14058, 13604, 13170, 12803,
          12378, 11950, 11518, 11163, 10906, 10719, 10604, 10441, 10288, 10137, 10093, 10093, 9953,
          9577, 9096, 8768, 8466, 8295, 8060, 7834, 7759, 7667, 7648, 7528, 7300, 7072, 6739, 6490,
          6279, 6106, 6070, 6103, 6090, 5880, 5537, 5243, 4964, 4783, 4641, 4589, 4497, 4378, 4205,
          4048, 3873, 3746, 3645, 3573, 3574, 3548, 3486, 3380, 3300, 3169, 3033, 2939, 2816, 2748,
          2700,
        ],
        MeasureMain: [
          375, 1101, 1018, 1218, 1443, 1806, 2362, 2982, 3510, 3846, 4071, 4417, 5091, 6250, 8323,
          13367, 18468, 19193, 16848, 15436, 15316, 16708, 17762, 18264, 17607, 15583, 14692, 15867,
          19610, 20785, 18569, 17082, 16907, 16774, 16065, 14778, 14347, 14828, 15756, 16507, 17428,
          18652, 20759, 23372, 24820, 24193, 22744, 21620, 21097, 20479, 19242, 17421, 15774, 14219,
          13646, 13361, 12802, 11909, 11650, 11676, 11644, 11646, 11974, 12690, 13229, 13464, 14060,
          15405, 17432, 19467, 21387, 21340, 19409, 17570, 16879, 16644, 17004, 17479, 17214, 16427,
          16343, 16556, 16719, 17031, 17232, 16676, 15978, 15708, 16062, 16542, 16802, 17040, 17433,
          18082, 19281, 21457, 23805, 25598, 25907, 25265, 24436, 24292, 24434, 25077, 26311, 27400,
          28033, 28578, 29142, 29139, 28534, 27776, 27992, 28969, 28717, 26854, 25263, 23951, 22637,
          21683, 21188, 21087, 21847, 25208, 28486, 29145, 26322, 24054, 21223, 18455, 16253, 14961,
          13889, 13123, 12660, 12360, 12298, 12255, 12210, 12413, 12529, 12412, 12536, 13738, 15663,
          16193, 15416, 14115, 13235, 12538, 12663, 12561, 32191, 28390, 25404, 23170, 21671, 20667,
          19730, 19139, 18901, 18982, 19297, 19467, 19560, 19654, 19573, 18964, 17927, 16917, 16184,
          15813, 15674, 15743, 15890, 16077, 16564, 16943, 16773, 16461, 16822, 17292, 17359, 16998,
          16374, 15537, 14743, 14230, 13945, 13764, 13750, 13886, 13963, 13751, 13281, 12794, 12463,
          12068, 11615, 11189, 10852, 10557, 10383, 10203, 10140, 9986, 9805, 9780, 9818, 9700,
          9273, 8782, 8414, 8105, 7935, 7701, 7536, 7413, 7368, 7346, 7234, 6957, 6660, 6357, 6120,
          5919, 5764, 5751, 5796, 5810, 5670, 5316, 4977, 4684, 4467, 4343, 4241, 4185, 4079, 3910,
          3772, 3575, 3474, 3335, 3253, 3254, 3200, 3117, 3039, 2919, 2762, 2707, 2606, 2541, 2463,
          2391,
        ],
        MeasureRef: [
          521, 1135, 896, 958, 1085, 1294, 1667, 2092, 2454, 2702, 2876, 3117, 3608, 4415, 5874,
          9291, 13109, 13853, 12286, 11230, 11163, 12218, 13076, 13610, 13256, 11925, 11231, 12073,
          14842, 15858, 14294, 13091, 12913, 12859, 12326, 11422, 11138, 11521, 12249, 12902, 13726,
          14722, 16425, 18462, 19622, 19203, 18083, 17161, 16755, 16202, 15243, 13910, 12629, 11445,
          10999, 10770, 10269, 9609, 9469, 9499, 9460, 9488, 9823, 10415, 10892, 11115, 11665,
          12823, 14488, 16105, 17605, 17535, 15992, 14579, 14046, 13859, 14206, 14540, 14272, 13748,
          13724, 13913, 14126, 14377, 14495, 14116, 13582, 13399, 13744, 14139, 14405, 14641, 15046,
          15627, 16724, 18542, 20654, 22160, 22465, 21974, 21354, 21221, 21403, 21969, 23015, 23951,
          24524, 25073, 25593, 25616, 25122, 24525, 24792, 25671, 25534, 24016, 22718, 21619, 20525,
          19662, 19254, 19129, 19816, 22638, 25322, 25775, 23471, 21552, 19187, 16806, 14944, 13798,
          12850, 12186, 11774, 11510, 11436, 11383, 11374, 11521, 11658, 11560, 11692, 12734, 14386,
          14831, 14169, 13092, 12293, 11698, 11797, 11661, 30322, 27012, 24365, 22298, 20976, 20021,
          19185, 18644, 18455, 18506, 18814, 18918, 19014, 19114, 19030, 18455, 17563, 16677, 15978,
          15651, 15549, 15652, 15781, 15998, 16491, 16830, 16675, 16386, 16751, 17173, 17283, 16909,
          16385, 15523, 14788, 14316, 14070, 13906, 13933, 14085, 14147, 13901, 13424, 13014, 12663,
          12228, 11789, 11406, 11054, 10796, 10631, 10493, 10348, 10190, 10062, 10014, 10022, 9897,
          9466, 9011, 8660, 8404, 8206, 7986, 7857, 7685, 7638, 7625, 7481, 7270, 6995, 6699, 6441,
          6240, 6084, 6011, 6085, 6053, 5855, 5513, 5197, 4921, 4727, 4596, 4553, 4459, 4339, 4218,
          4029, 3875, 3744, 3612, 3600, 3553, 3506, 3444, 3393, 3254, 3161, 3022, 2935, 2839, 2721,
          2696,
        ],
        Absorb: [
          0.47421625, 0.43911102, 0.41426197, 0.4295982, 0.41563845, 0.40226826, 0.39248788,
          0.3861667, 0.38211152, 0.3779121, 0.3714138, 0.3630371, 0.3541319, 0.34697852, 0.34234497,
          0.3446311, 0.34799394, 0.35223478, 0.35514492, 0.35573635, 0.35515344, 0.35254094,
          0.35108855, 0.34896314, 0.34679422, 0.34313777, 0.3382813, 0.334682, 0.33646494,
          0.34005326, 0.34446344, 0.34641337, 0.34760034, 0.346832, 0.34583196, 0.3422479,
          0.33883917, 0.33505315, 0.3336693, 0.33217558, 0.33074096, 0.32739532, 0.32545742,
          0.3242508, 0.32564986, 0.32782686, 0.33129805, 0.3346541, 0.33698413, 0.33870134,
          0.3417194, 0.34555706, 0.3488048, 0.34848794, 0.3474538, 0.34510803, 0.34267455,
          0.33972585, 0.33784375, 0.33699223, 0.33586854, 0.3349424, 0.33341926, 0.33319503,
          0.3325079, 0.33182368, 0.33026218, 0.3298094, 0.32887238, 0.32843494, 0.32870656,
          0.33130437, 0.33369103, 0.33537385, 0.33516592, 0.33560494, 0.33603445, 0.33669388,
          0.33738112, 0.33807322, 0.33771402, 0.3370077, 0.33566728, 0.33579206, 0.33532822,
          0.3350589, 0.33347595, 0.33258143, 0.33111602, 0.33015153, 0.32851753, 0.32846412,
          0.3271513, 0.32600105, 0.32295352, 0.32211578, 0.3202653, 0.31932074, 0.31882256,
          0.32000962, 0.31976035, 0.31835157, 0.31569678, 0.31412208, 0.30963147, 0.30434844,
          0.29821384, 0.29357216, 0.29085165, 0.29115358, 0.2951171, 0.29813027, 0.29790008,
          0.2947732, 0.29824448, 0.3061653, 0.3171361, 0.32149306, 0.32320842, 0.32261124,
          0.3234727, 0.3223186, 0.31910586, 0.3077983, 0.29799178, 0.29795408, 0.30617136,
          0.3180898, 0.32247165, 0.325211, 0.32645842, 0.3265295, 0.32631752, 0.32663712,
          0.32685032, 0.3265106, 0.3260274, 0.3256747, 0.32509887, 0.32452768, 0.32398516,
          0.32366437, 0.32237113, 0.32110485, 0.3200986, 0.32001668, 0.32046357, 0.32103,
          0.32131207, 0.32100913, 0.3211764, 0.31426397, 0.3186557, 0.32108137, 0.32831255,
          0.3287485, 0.32863772, 0.32816982, 0.32715288, 0.32679877, 0.32713035, 0.32707828,
          0.32559907, 0.3237682, 0.3223, 0.32223442, 0.32210165, 0.32329696, 0.3242523, 0.3255227,
          0.32533088, 0.32530102, 0.32530412, 0.32523957, 0.3254496, 0.3256019, 0.3254091,
          0.32500726, 0.32438308, 0.32408437, 0.32425702, 0.32429832, 0.32416534, 0.3239764,
          0.3226846, 0.32165864, 0.3204921, 0.32101393, 0.3217313, 0.32368386, 0.325925, 0.32781625,
          0.32784015, 0.3274468, 0.32727554, 0.32725683, 0.32708165, 0.32696155, 0.3274058,
          0.32780805, 0.32834998, 0.32854658, 0.32965058, 0.33007255, 0.33019248, 0.33041146,
          0.33119586, 0.33218798, 0.33212325, 0.33164036, 0.331256, 0.3310446, 0.33203784,
          0.33309796, 0.3339321, 0.33331108, 0.3332626, 0.33353633, 0.33411452, 0.33379662,
          0.3330706, 0.3320154, 0.33139455, 0.33158737, 0.33226937, 0.33346465, 0.33407944,
          0.3354774, 0.33627883, 0.33560258, 0.3341381, 0.33146995, 0.331594, 0.33319274,
          0.33623752, 0.3379956, 0.33716866, 0.33575737, 0.33552858, 0.3348338, 0.33566445,
          0.33455855, 0.33656996, 0.33906665, 0.34016234, 0.3393737, 0.33783618, 0.33666244,
          0.33657548, 0.33743635, 0.33779478, 0.3370851, 0.33377123, 0.33406785, 0.33472013,
          0.33600163,
        ],
        T: '2021-12-19T20:28:46.9778564+08:00',
      },
      Sample: 'test',
      Status: 200,
    };

    let count = 180;
    var tempStaticMain = [];
    for (let i in origin.Data.MeasureMain) {
      tempStaticMain.push({
        row: Math.round(count),
        name: 'MeasureMain',
        value: origin.Data.MeasureMain[i],
      });
      tempStaticMain.push({
        row: Math.round(count),
        name: 'ZeroMain',
        value: origin.Data.ZeroMain[i],
      });
      console.log(Math.round(count), '-------Math.round(count)');
      count += 2.2265625;
    }

    count = 180;
    var tempStaticRef = [];
    for (let i in origin.Data.MeasureRef) {
      tempStaticRef.push({
        row: Math.round(count),
        name: 'MeasureRef',
        value: origin.Data.MeasureRef[i],
      });
      tempStaticRef.push({
        row: Math.round(count),
        name: 'ZeroRef',
        value: origin.Data.ZeroRef[i],
      });
      count += 2.2265625;
    }

    count = 200;
    var tempStaticAbsorb = [];
    for (let i in origin.Data.Absorb) {
      tempStaticAbsorb.push({
        row: Math.round(count),
        value: origin.Data.Absorb[i],
      });
      count += 2.2265625;
    }

    const tempDynamic = [
      { type: 'NO3', time: '2021-12-20', value: 10 },
      { type: 'COD', time: '2021-12-20', value: 10 },
      { type: 'TSS', time: '2021-12-20', value: 10 },
      { type: 'NO3', time: '2021-12-21', value: 11 },
      { type: 'COD', time: '2021-12-21', value: 12 },
      { type: 'TSS', time: '2021-12-21', value: 13 },
      { type: 'NO3', time: '2021-12-22', value: 13 },
      { type: 'COD', time: '2021-12-22', value: 12 },
      { type: 'TSS', time: '2021-12-22', value: 12 },
      { type: 'NO3', time: '2021-12-23', value: 14 },
      { type: 'COD', time: '2021-12-23', value: 15 },
      { type: 'TSS', time: '2021-12-23', value: 14 },
      { type: 'NO3', time: '2021-12-24', value: 16 },
      { type: 'COD', time: '2021-12-24', value: 17 },
      { type: 'TSS', time: '2021-12-24', value: 15 },
    ];

    setStaticMain(tempStaticMain);
    setStaticRef(tempStaticRef);
    setStaticAbsorb(tempStaticAbsorb);
    setDynamic(tempDynamic);
  }, [1]);

  const onSearch = (name) => {
    get_data({ Sample: name }).then((resp) => {
      let count = 180;
      var tempStaticMain = [];
      for (let i in resp.Data.MeasureMain) {
        tempStaticMain.push({
          row: Math.round(count),
          name: 'MeasureMain',
          value: resp.Data.MeasureMain[i],
        });
        tempStaticMain.push({
          row: Math.round(count),
          name: 'ZeroMain',
          value: resp.Data.ZeroMain[i],
        });
        count += 2.2265625;
      }

      count = 180;
      var tempStaticRef = [];
      for (let i in resp.Data.MeasureRef) {
        console.log(Math.round(count), '------------');
        tempStaticRef.push({
          row: Math.round(count),
          name: 'MeasureRef',
          value: resp.Data.MeasureRef[i],
        });
        tempStaticRef.push({
          row: Math.round(count),
          name: 'ZeroRef',
          value: resp.Data.ZeroRef[i],
        });
        count += 2.2265625;
      }

      count = 200;
      var tempStaticAbsorb = [];
      for (let i in resp.Data.Absorb) {
        tempStaticAbsorb.push({
          row: Math.round(count),
          value: resp.Data.Absorb[i],
        });
        count += 2.2265625;
      }

      const tempOther = [
        {
          name: resp.Sample,
          specStu: resp.SpecStu,
          time: resp.T,
          tem: resp.Temperature,
          no3: resp.NO3Wave,
          cod: resp.CODWave,
          tss: resp.TSSWave,
          refcorfac: resp.RefCorFac,
          no3corfac: resp.NO3Wave,
          turcorfac: resp.TurCorFac,
        },
      ];

      setStaticMain(tempStaticMain);
      setStaticRef(tempStaticRef);
      setStaticAbsorb(tempStaticAbsorb);
      setOther(tempOther);
    });

    get_dynamic().then((resp) => {
      let tempDynamic = [];
      if (resp.Status == 200) {
        for (let i in resp.cod) {
          let data = { type: 'COD', time: count, i: resp.cod[i] };
          tempDynamic.push(data);
        }

        for (let i in resp.tss) {
          let data = { type: 'TSS', time: count, import: resp.tss[i] };
          tempDynamic.push(data);
        }

        for (let i in resp.no3) {
          let data = { type: 'NO3', time: count, i: resp.no3[i] };
          tempDynamic.push(data);
        }
      }

      setDynamic(tempDynamic);
    });
  };

  return (
    <PageContainer>
      <Row gutter={24}>
        <Col xl={24} lg={24} md={24} sm={24} xs={24}>
          <Search
            placeholder="start measure"
            enterButton="开始测量"
            size="large"
            onSearch={onSearch}
          />
          <Card
            style={{ marginBottom: 24, marginTop: 24 }}
            title={<Title level={5}>ref 光谱</Title>}
          >
            <StaticRefChart data={staticRef} />
          </Card>

          <Card style={{ marginBottom: 24 }} title={<Title level={5}>Main 光谱</Title>}>
            <StaticMainChart data={staticMain} />
          </Card>

          <Card style={{ marginBottom: 24 }} title={<Title level={5}>吸收度光谱</Title>}>
            <StaticAbsorbChart data={staticAbsorb} />
          </Card>

          <Card style={{ marginBottom: 24 }} title={<Title level={5}>浓度</Title>}>
            <DynamicChart data={dynamic} />
          </Card>

          <Card style={{ marginBottom: 24 }} title={<Title level={5}>其他数据展示</Title>}>
            <StatisticTable data={other} />
          </Card>
        </Col>
      </Row>
    </PageContainer>
  );
};

export default HomePage;
